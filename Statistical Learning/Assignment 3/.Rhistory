set.seed(4) #For reproducibility
#creating partition for training data
df_sample = createDataPartition(df1$Edible, p=0.7, list= F)
df_train_rf <- df1[df_sample, ]
df_test_rf <- df1[-df_sample, ]
formulas = c("Edible ~ CapShape", "Edible ~ CapSurface", "Edible ~ CapColor","Edible ~ Odor","Edible ~ Height",
"Edible ~ CapShape + CapSurface", "Edible ~ CapShape + CapColor", "Edible ~ CapShape + Odor","Edible ~ CapShape + Height",
"Edible ~ CapSurface + CapColor","Edible ~ CapSurface + Odor","Edible ~ CapSurface + Height","Edible ~ CapColor + Odor",
"Edible ~ CapColor + Height","Edible ~ Odor + Height",
"Edible ~ CapShape + CapSurface + CapColor","Edible ~ CapSurface + CapColor + Odor","Edible ~ CapColor + Odor + Height",
"Edible ~ CapShape + CapColor + Odor","Edible ~ CapShape + Odor + Height","Edible ~ CapShape + CapSurface + Odor",
"Edible ~ CapShape + CapSurface + Height","Edible ~ CapSurface + CapColor + Height","Edible ~ CapSurface + Odor + Height",
"Edible ~ CapShape + CapColor + Height",
"Edible ~ CapShape + CapSurface + CapColor + Odor","Edible ~ CapSurface + CapColor + Odor + Height",
"Edible ~ CapShape + CapColor + Odor + Height","Edible ~ CapShape + CapSurface + Odor + Height",
"Edible ~ CapShape + CapSurface + CapColor + Height",
"Edible ~ CapShape + CapSurface + CapColor + Odor + Height")
length(formulas)
df_train_rf$Edible = as.factor(df_train_rf$Edible)
accuracy = rep(NA, length(formulas))
for(i in 1:length(formulas)){
myForest = randomForest(formula=as.formula(formulas[i]),
data=df_train_rf)
prediction = predict(myForest, df_test_rf)
prediction_df = data.frame(df_test_rf$Edible, prediction)
cnf_mat = table(prediction_df$df_test_rf.Edible, prediction_df$prediction)
accuracy[i] = (cnf_mat[1,1] + cnf_mat[2,2])/dim(df_test_rf)[1]
}
which.max(accuracy)
max(accuracy)
df1 <- read_csv("mushrooms.csv", col_names = TRUE)
#df_sample = createDataPartition(df1$Edible, p=0.7, list= F)
#df_train_rf <- df1[df_sample, ]
#df_test_rf <- df1[-df_sample, ]
#cross-validation
set.seed(6) #For reproducibility
#creating partition for training data
df_sample = createDataPartition(df1$Edible, p=0.7, list= F)
df_train_rf <- df1[df_sample, ]
df_test_rf <- df1[-df_sample, ]
formulas = c("Edible ~ CapShape", "Edible ~ CapSurface", "Edible ~ CapColor","Edible ~ Odor","Edible ~ Height",
"Edible ~ CapShape + CapSurface", "Edible ~ CapShape + CapColor", "Edible ~ CapShape + Odor","Edible ~ CapShape + Height",
"Edible ~ CapSurface + CapColor","Edible ~ CapSurface + Odor","Edible ~ CapSurface + Height","Edible ~ CapColor + Odor",
"Edible ~ CapColor + Height","Edible ~ Odor + Height",
"Edible ~ CapShape + CapSurface + CapColor","Edible ~ CapSurface + CapColor + Odor","Edible ~ CapColor + Odor + Height",
"Edible ~ CapShape + CapColor + Odor","Edible ~ CapShape + Odor + Height","Edible ~ CapShape + CapSurface + Odor",
"Edible ~ CapShape + CapSurface + Height","Edible ~ CapSurface + CapColor + Height","Edible ~ CapSurface + Odor + Height",
"Edible ~ CapShape + CapColor + Height",
"Edible ~ CapShape + CapSurface + CapColor + Odor","Edible ~ CapSurface + CapColor + Odor + Height",
"Edible ~ CapShape + CapColor + Odor + Height","Edible ~ CapShape + CapSurface + Odor + Height",
"Edible ~ CapShape + CapSurface + CapColor + Height",
"Edible ~ CapShape + CapSurface + CapColor + Odor + Height")
length(formulas)
df_train_rf$Edible = as.factor(df_train_rf$Edible)
accuracy = rep(NA, length(formulas))
for(i in 1:length(formulas)){
myForest = randomForest(formula=as.formula(formulas[i]),
data=df_train_rf)
prediction = predict(myForest, df_test_rf)
prediction_df = data.frame(df_test_rf$Edible, prediction)
cnf_mat = table(prediction_df$df_test_rf.Edible, prediction_df$prediction)
accuracy[i] = (cnf_mat[1,1] + cnf_mat[2,2])/dim(df_test_rf)[1]
}
which.max(accuracy)
max(accuracy)
set.seed(6)
rf_winner = rep(NA, 5)
for(iter in 1:5){
accuracy = rep(NA, length(formulas))
idx = createDataPartition(df1$Edible, p=0.7, list = F)
df_train_rf = df1[idx, ]
df_test_rf = df1[-idx, ]
df_train_rf$Edible = as.factor(df_train_rf$Edible)
for(i in 1:length(formulas)){
myForest = randomForest(formula=as.formula(formulas[i]),
data=df_train_rf)
prediction = predict(myForest, df_test_rf)
prediction_df = data.frame(df_test_rf$Edible, prediction)
cnf_mat = table(prediction_df$df_test_rf.Edible, prediction_df$prediction)
accuracy[i] = (cnf_mat[1,1] + cnf_mat[2,2])/dim(df_test_rf)[1]
}
rf_winner[iter] = which.max(accuracy)
}
which.max(accuracy)
max(accuracy)
factors[28]
formulas[28]
formulas[26]
#cross-validation
set.seed(10) #For reproducibility
#creating partition for training data
df_sample = createDataPartition(df1$Edible, p=0.7, list= F)
df_train_rf <- df1[df_sample, ]
df_test_rf <- df1[-df_sample, ]
formulas = c("Edible ~ CapShape", "Edible ~ CapSurface", "Edible ~ CapColor","Edible ~ Odor","Edible ~ Height",
"Edible ~ CapShape + CapSurface", "Edible ~ CapShape + CapColor", "Edible ~ CapShape + Odor","Edible ~ CapShape + Height",
"Edible ~ CapSurface + CapColor","Edible ~ CapSurface + Odor","Edible ~ CapSurface + Height","Edible ~ CapColor + Odor",
"Edible ~ CapColor + Height","Edible ~ Odor + Height",
"Edible ~ CapShape + CapSurface + CapColor","Edible ~ CapSurface + CapColor + Odor","Edible ~ CapColor + Odor + Height",
"Edible ~ CapShape + CapColor + Odor","Edible ~ CapShape + Odor + Height","Edible ~ CapShape + CapSurface + Odor",
"Edible ~ CapShape + CapSurface + Height","Edible ~ CapSurface + CapColor + Height","Edible ~ CapSurface + Odor + Height",
"Edible ~ CapShape + CapColor + Height",
"Edible ~ CapShape + CapSurface + CapColor + Odor","Edible ~ CapSurface + CapColor + Odor + Height",
"Edible ~ CapShape + CapColor + Odor + Height","Edible ~ CapShape + CapSurface + Odor + Height",
"Edible ~ CapShape + CapSurface + CapColor + Height",
"Edible ~ CapShape + CapSurface + CapColor + Odor + Height")
length(formulas)
df_train_rf$Edible = as.factor(df_train_rf$Edible)
accuracy = rep(NA, length(formulas))
for(i in 1:length(formulas)){
myForest = randomForest(formula=as.formula(formulas[i]),
data=df_train_rf)
prediction = predict(myForest, df_test_rf)
prediction_df = data.frame(df_test_rf$Edible, prediction)
cnf_mat = table(prediction_df$df_test_rf.Edible, prediction_df$prediction)
accuracy[i] = (cnf_mat[1,1] + cnf_mat[2,2])/dim(df_test_rf)[1]
}
which.max(accuracy)
df1 <- read_csv("mushrooms.csv", col_names = TRUE)
#df_sample = createDataPartition(df1$Edible, p=0.7, list= F)
#df_train_rf <- df1[df_sample, ]
#df_test_rf <- df1[-df_sample, ]
#cross-validation
set.seed(6) #For reproducibility
#creating partition for training data
df_sample = createDataPartition(df1$Edible, p=0.7, list= F)
df_train_rf <- df1[df_sample, ]
df_test_rf <- df1[-df_sample, ]
formulas = c("Edible ~ CapShape", "Edible ~ CapSurface", "Edible ~ CapColor","Edible ~ Odor","Edible ~ Height",
"Edible ~ CapShape + CapSurface", "Edible ~ CapShape + CapColor", "Edible ~ CapShape + Odor","Edible ~ CapShape + Height",
"Edible ~ CapSurface + CapColor","Edible ~ CapSurface + Odor","Edible ~ CapSurface + Height","Edible ~ CapColor + Odor",
"Edible ~ CapColor + Height","Edible ~ Odor + Height",
"Edible ~ CapShape + CapSurface + CapColor","Edible ~ CapSurface + CapColor + Odor","Edible ~ CapColor + Odor + Height",
"Edible ~ CapShape + CapColor + Odor","Edible ~ CapShape + Odor + Height","Edible ~ CapShape + CapSurface + Odor",
"Edible ~ CapShape + CapSurface + Height","Edible ~ CapSurface + CapColor + Height","Edible ~ CapSurface + Odor + Height",
"Edible ~ CapShape + CapColor + Height",
"Edible ~ CapShape + CapSurface + CapColor + Odor","Edible ~ CapSurface + CapColor + Odor + Height",
"Edible ~ CapShape + CapColor + Odor + Height","Edible ~ CapShape + CapSurface + Odor + Height",
"Edible ~ CapShape + CapSurface + CapColor + Height",
"Edible ~ CapShape + CapSurface + CapColor + Odor + Height")
length(formulas)
df_train_rf$Edible = as.factor(df_train_rf$Edible)
accuracy = rep(NA, length(formulas))
for(i in 1:length(formulas)){
myForest = randomForest(formula=as.formula(formulas[i]),
data=df_train_rf)
prediction = predict(myForest, df_test_rf)
prediction_df = data.frame(df_test_rf$Edible, prediction)
cnf_mat = table(prediction_df$df_test_rf.Edible, prediction_df$prediction)
accuracy[i] = (cnf_mat[1,1] + cnf_mat[2,2])/dim(df_test_rf)[1]
}
which.max(accuracy)
which.max(accuracy)
max(accuracy)
which.max(accuracy)
max(accuracy)
formulas[27]
myForest1 = randomForest(formula=as.formula(formulas[27]),
data=df_train_rf)
prediction1 = predict(myForest1, df1)
prediction_df1 = data.frame(df1$Edible, prediction1)
cnf_mat1 = table(prediction_df1$df1.Edible, prediction_df1$prediction1)
cnf_mat1
accuracy1 = (cnf_mat[1,1] + cnf_mat[2,2])/dim(df1)[1]
accuracy1
set.seed(6)
rf_winner = rep(NA, 5)
for(iter in 1:5){
accuracy = rep(NA, length(formulas))
idx = createDataPartition(df1$Edible, p=0.7, list = F)
df_train_rf = df1[idx, ]
df_test_rf = df1[-idx, ]
df_train_rf$Edible = as.factor(df_train_rf$Edible)
for(i in 1:length(formulas)){
myForest = randomForest(formula=as.formula(formulas[i]),
data=df_train_rf)
prediction = predict(myForest, df_test_rf)
prediction_df = data.frame(df_test_rf$Edible, prediction)
cnf_mat = table(prediction_df$df_test_rf.Edible, prediction_df$prediction)
accuracy[i] = (cnf_mat[1,1] + cnf_mat[2,2])/dim(df_test_rf)[1]
}
rf_winner[iter] = which.max(accuracy)
}
which.max(accuracy)
formulas[28]
formulas[27]
max(accuracy)
myForest1 = randomForest(formula=as.formula(formulas[28]),
data=df_train_rf)
prediction1 = predict(myForest1, df1)
prediction_df1 = data.frame(df1$Edible, prediction1)
cnf_mat1 = table(prediction_df1$df1.Edible, prediction_df1$prediction1)
cnf_mat1
accuracy1 = (cnf_mat[1,1] + cnf_mat[2,2])/dim(df1)[1]
accuracy1
accuracy
myForest1 = randomForest(formula=as.formula(formulas[28]),
data=df_train_rf)
prediction1 = predict(myForest1, df1)
prediction_df1 = data.frame(df1$Edible, prediction1)
cnf_mat1 = table(prediction_df1$df1.Edible, prediction_df1$prediction1)
cnf_mat1
accuracy1 = (cnf_mat1[1,1] + cnf_mat1[2,2])/dim(df1)[1]
accuracy1
varImpPlot(myForest,
sort = T,
main="Fig 11: Feature importance by random forest model 27")
df1 <- read_csv("mushrooms.csv", col_names = TRUE)
#df_sample = createDataPartition(df1$Edible, p=0.7, list= F)
#df_train_rf <- df1[df_sample, ]
#df_test_rf <- df1[-df_sample, ]
#cross-validation
set.seed(1000) #For reproducibility
#creating partition for training data
df_sample = createDataPartition(df1$Edible, p=0.7, list= F)
df_train_rf <- df1[df_sample, ]
df_test_rf <- df1[-df_sample, ]
formulas = c("Edible ~ CapShape", "Edible ~ CapSurface", "Edible ~ CapColor","Edible ~ Odor","Edible ~ Height",
"Edible ~ CapShape + CapSurface", "Edible ~ CapShape + CapColor", "Edible ~ CapShape + Odor","Edible ~ CapShape + Height",
"Edible ~ CapSurface + CapColor","Edible ~ CapSurface + Odor","Edible ~ CapSurface + Height","Edible ~ CapColor + Odor",
"Edible ~ CapColor + Height","Edible ~ Odor + Height",
"Edible ~ CapShape + CapSurface + CapColor","Edible ~ CapSurface + CapColor + Odor","Edible ~ CapColor + Odor + Height",
"Edible ~ CapShape + CapColor + Odor","Edible ~ CapShape + Odor + Height","Edible ~ CapShape + CapSurface + Odor",
"Edible ~ CapShape + CapSurface + Height","Edible ~ CapSurface + CapColor + Height","Edible ~ CapSurface + Odor + Height",
"Edible ~ CapShape + CapColor + Height",
"Edible ~ CapShape + CapSurface + CapColor + Odor","Edible ~ CapSurface + CapColor + Odor + Height",
"Edible ~ CapShape + CapColor + Odor + Height","Edible ~ CapShape + CapSurface + Odor + Height",
"Edible ~ CapShape + CapSurface + CapColor + Height",
"Edible ~ CapShape + CapSurface + CapColor + Odor + Height")
length(formulas)
df_train_rf$Edible = as.factor(df_train_rf$Edible)
accuracy = rep(NA, length(formulas))
for(i in 1:length(formulas)){
myForest = randomForest(formula=as.formula(formulas[i]),
data=df_train_rf)
prediction = predict(myForest, df_test_rf)
prediction_df = data.frame(df_test_rf$Edible, prediction)
cnf_mat = table(prediction_df$df_test_rf.Edible, prediction_df$prediction)
accuracy[i] = (cnf_mat[1,1] + cnf_mat[2,2])/dim(df_test_rf)[1]
}
which.max(accuracy)
cross-validation
set.seed(1234) #For reproducibility
#creating partition for training data
df_sample = createDataPartition(df1$Edible, p=0.7, list= F)
df_train_rf <- df1[df_sample, ]
df_test_rf <- df1[-df_sample, ]
formulas = c("Edible ~ CapShape", "Edible ~ CapSurface", "Edible ~ CapColor","Edible ~ Odor","Edible ~ Height",
"Edible ~ CapShape + CapSurface", "Edible ~ CapShape + CapColor", "Edible ~ CapShape + Odor","Edible ~ CapShape + Height",
"Edible ~ CapSurface + CapColor","Edible ~ CapSurface + Odor","Edible ~ CapSurface + Height","Edible ~ CapColor + Odor",
"Edible ~ CapColor + Height","Edible ~ Odor + Height",
"Edible ~ CapShape + CapSurface + CapColor","Edible ~ CapSurface + CapColor + Odor","Edible ~ CapColor + Odor + Height",
"Edible ~ CapShape + CapColor + Odor","Edible ~ CapShape + Odor + Height","Edible ~ CapShape + CapSurface + Odor",
"Edible ~ CapShape + CapSurface + Height","Edible ~ CapSurface + CapColor + Height","Edible ~ CapSurface + Odor + Height",
"Edible ~ CapShape + CapColor + Height",
"Edible ~ CapShape + CapSurface + CapColor + Odor","Edible ~ CapSurface + CapColor + Odor + Height",
"Edible ~ CapShape + CapColor + Odor + Height","Edible ~ CapShape + CapSurface + Odor + Height",
"Edible ~ CapShape + CapSurface + CapColor + Height",
"Edible ~ CapShape + CapSurface + CapColor + Odor + Height")
length(formulas)
df_train_rf$Edible = as.factor(df_train_rf$Edible)
accuracy = rep(NA, length(formulas))
for(i in 1:length(formulas)){
myForest = randomForest(formula=as.formula(formulas[i]),
data=df_train_rf)
prediction = predict(myForest, df_test_rf)
prediction_df = data.frame(df_test_rf$Edible, prediction)
cnf_mat = table(prediction_df$df_test_rf.Edible, prediction_df$prediction)
accuracy[i] = (cnf_mat[1,1] + cnf_mat[2,2])/dim(df_test_rf)[1]
}
which.max(accuracy)
#TASK 2 (RANDOM FOREST)
library(randomForest)
df1 <- read_csv("mushrooms.csv", col_names = TRUE)
#df_sample = createDataPartition(df1$Edible, p=0.7, list= F)
#df_train_rf <- df1[df_sample, ]
#df_test_rf <- df1[-df_sample, ]
#cross-validation
set.seed(3) #For reproducibility
#creating partition for training data
df_sample = createDataPartition(df1$Edible, p=0.7, list= F)
df_train_rf <- df1[df_sample, ]
df_test_rf <- df1[-df_sample, ]
formulas = c("Edible ~ CapShape", "Edible ~ CapSurface", "Edible ~ CapColor","Edible ~ Odor","Edible ~ Height",
"Edible ~ CapShape + CapSurface", "Edible ~ CapShape + CapColor", "Edible ~ CapShape + Odor","Edible ~ CapShape + Height",
"Edible ~ CapSurface + CapColor","Edible ~ CapSurface + Odor","Edible ~ CapSurface + Height","Edible ~ CapColor + Odor",
"Edible ~ CapColor + Height","Edible ~ Odor + Height",
"Edible ~ CapShape + CapSurface + CapColor","Edible ~ CapSurface + CapColor + Odor","Edible ~ CapColor + Odor + Height",
"Edible ~ CapShape + CapColor + Odor","Edible ~ CapShape + Odor + Height","Edible ~ CapShape + CapSurface + Odor",
"Edible ~ CapShape + CapSurface + Height","Edible ~ CapSurface + CapColor + Height","Edible ~ CapSurface + Odor + Height",
"Edible ~ CapShape + CapColor + Height",
"Edible ~ CapShape + CapSurface + CapColor + Odor","Edible ~ CapSurface + CapColor + Odor + Height",
"Edible ~ CapShape + CapColor + Odor + Height","Edible ~ CapShape + CapSurface + Odor + Height",
"Edible ~ CapShape + CapSurface + CapColor + Height",
"Edible ~ CapShape + CapSurface + CapColor + Odor + Height")
length(formulas)
df_train_rf$Edible = as.factor(df_train_rf$Edible)
accuracy = rep(NA, length(formulas))
for(i in 1:length(formulas)){
myForest = randomForest(formula=as.formula(formulas[i]),
data=df_train_rf)
prediction = predict(myForest, df_test_rf)
prediction_df = data.frame(df_test_rf$Edible, prediction)
cnf_mat = table(prediction_df$df_test_rf.Edible, prediction_df$prediction)
accuracy[i] = (cnf_mat[1,1] + cnf_mat[2,2])/dim(df_test_rf)[1]
}
which.max(accuracy)
set.seed(3)
rf_winner = rep(NA, 5)
for(iter in 1:5){
accuracy = rep(NA, length(formulas))
idx = createDataPartition(df1$Edible, p=0.7, list = F)
df_train_rf = df1[idx, ]
df_test_rf = df1[-idx, ]
df_train_rf$Edible = as.factor(df_train_rf$Edible)
for(i in 1:length(formulas)){
myForest = randomForest(formula=as.formula(formulas[i]),
data=df_train_rf)
prediction = predict(myForest, df_test_rf)
prediction_df = data.frame(df_test_rf$Edible, prediction)
cnf_mat = table(prediction_df$df_test_rf.Edible, prediction_df$prediction)
accuracy[i] = (cnf_mat[1,1] + cnf_mat[2,2])/dim(df_test_rf)[1]
}
rf_winner[iter] = which.max(accuracy)
}
which.max(accuracy)
myForest1 = randomForest(formula=as.formula(formulas[26]),
data=df_train_rf)
prediction1 = predict(myForest1, df1)
prediction_df1 = data.frame(df1$Edible, prediction1)
cnf_mat1 = table(prediction_df1$df1.Edible, prediction_df1$prediction1)
cnf_mat1
accuracy1 = (cnf_mat1[1,1] + cnf_mat1[2,2])/dim(df1)[1]
accuracy1
hist(rf_winner, breaks = seq(0.5, 31.5, 1), xlab="Model", ylab="Frequency", main="")
data.frame(rf_winner)
data.frame(rf_winner) %>%
ggplot()
data.frame(rf_winner) %>%
geom_histogram()
data.frame(rf_winner) %>%
ggplot( aes(rf_winner,label = rf_winner)) +
geom_histogram() +
geom_text(size=1.5,nudge_y = 0.05,  check_overlap = TRUE)
data.frame(rf_winner) %>%
ggplot( aes(y=rf_winner,label = rf_winner)) +
geom_histogram() +
geom_text(size=1.5,nudge_y = 0.05,  check_overlap = TRUE)
data.frame(rf_winner) %>%
ggplot( aes(y=rf_winner,label = rf_winner)) +
geom_histogram() +
geom_text()
data.frame(rf_winner) %>%
ggplot( aes(y=rf_winner,label = rf_winner)) +
geom_histogram()
data.frame(rf_winner) %>%
ggplot( aes(x=rf_winner,label = rf_winner)) +
geom_histogram() +
geom_text()
data.frame(rf_winner) %>%
ggplot(aes(y=rf_winner)) +
geom_histogram(aes(y = ..density..)) +
geom_density() +
scale_y_continuous(breaks=c(0.5, 31.5, 1))
data.frame(rf_winner) %>%
ggplot(aes(y=rf_winner)) +
geom_histogram() +
geom_density() +
scale_y_continuous(breaks=c(0.5, 31.5, 1))
data.frame(rf_winner) %>%
ggplot(aes(y=rf_winner)) +
geom_histogram() +
scale_y_continuous(breaks=c(0.5, 31.5, 1))
hist(rf_winner, breaks = seq(0.5, 31.5, 1), xlab="Model", ylab="Frequency", main="")
data.frame(rf_winner) %>%
ggplot(aes(rf_winner)) +
geom_histogram() +
scale_y_continuous(breaks=c(0.5, 31.5, 1))
data.frame(rf_winner) %>%
ggplot(aes(rf_winner,label=rf_winner)) +
geom_histogram() +
scale_y_continuous(breaks=c(0.5, 31.5, 1))
data.frame(rf_winner) %>%
ggplot(aes(rf_winner,label=count())) +
geom_histogram() +
scale_y_continuous(breaks=c(0.5, 31.5, 1))
data.frame(rf_winner) %>%
ggplot(aes(rf_winner,label=count)) +
geom_histogram() +
scale_y_continuous(breaks=c(0.5, 31.5, 1))
data.frame(rf_winner) %>%
ggplot(aes(rf_winner,label=..count..)) +
geom_histogram() +
scale_y_continuous(breaks=c(0.5, 31.5, 1))
data.frame(rf_winner) %>%
ggplot(aes(rf_winner,label=..count..)) +
geom_histogram() +
scale_y_continuous(breaks=c(0.5, 31.5, 1))+
geom_text()
data.frame(rf_winner) %>%
ggplot(aes(rf_winner,label=..count..)) +
geom_histogram() +
scale_y_continuous(breaks=c(0.5, 31.5, 1))+
geom_text()
True
data.frame(rf_winner) %>%
ggplot(aes(rf_winner,label=..count..)) +
geom_histogram() +
scale_y_continuous(breaks=c(0.5, 31.5, 1))+
geom_text()
data.frame(rf_winner) %>%
ggplot(aes(x = rf_winner )) +
geom_histogram(aes(fill = cut , binwidth = 1500)) +
stat_bin(binwidth= 1500, geom="text", aes(label=..count..) ,
vjust = -1) +
scale_x_continuous(breaks = seq(0 , max(stores_1_5$Weekly_Sales) , 1500 )
, labels = comma)
data.frame(rf_winner) %>%
ggplot(aes(x = rf_winner )) +
geom_histogram(aes(fill = ..count.. , binwidth = 1500)) +
stat_bin(binwidth= 1500, geom="text", aes(label=..count..) ,
vjust = -1) +
scale_x_continuous(breaks = seq(0 , max(stores_1_5$Weekly_Sales) , 1500 )
, labels = comma)
data.frame(rf_winner) %>%
ggplot(aes(x = rf_winner )) +
geom_histogram(aes(fill = ..count.. , binwidth = 1500)) +
stat_bin(binwidth= 1500, geom="text", aes(label=..count..) ,
vjust = -1)
data.frame(rf_winner) %>%
ggplot(aes(x = rf_winner )) +
geom_histogram(aes(fill = ..count.. , binwidth = 1500)) +
stat_bin(binwidth= 1500, geom="text", aes(label=..count..) ,
vjust = -1) +
scale_y_continuous(breaks=c(0.5, 31.5, 1))
data.frame(rf_winner) %>%
ggplot(aes(x = rf_winner )) +
geom_histogram(aes(fill = ..count..)) +
stat_bin(geom="text", aes(label=..count..) ,
vjust = -1) +
scale_y_continuous(breaks=c(0.5, 31.5, 1))
data.frame(rf_winner) %>%
ggplot(aes(x = rf_winner )) +
geom_histogram(aes(fill = ..count..)) +
stat_bin(geom="text", aes(label=rf_winner) ,
vjust = -1) +
scale_y_continuous(breaks=c(0.5, 31.5, 1))
data.frame(rf_winner) %>%
ggplot(aes(x = rf_winner )) +
geom_histogram(aes(fill = ..count..)) +
stat_bin(geom="text", aes(label=rf_winner) ,
vjust = -1) +
scale_y_continuous(breaks=c(0.5, 31.5, 1))
data.frame(rf_winner) %>%
ggplot(aes(x = rf_winner )) +
geom_histogram(aes(fill = ..count..)) +
stat_bin(geom="text", aes(label=rf_winner) ,
vjust = -1) +
scale_x_continuous(breaks=c(0.5, 31.5, 1))
data.frame(rf_winner) %>%
ggplot(aes(x = rf_winner,label=rf_winner )) +
geom_histogram(aes(fill = ..count..)) +
stat_bin(geom="text", aes(label=rf_winner) ,
vjust = -1) +
scale_y_continuous(breaks=c(0.5, 31.5, 1))
data.frame(rf_winner) %>%
ggplot(aes(y=rf_winner,label = rf_winner)) +
geom_histogram()
data.frame(rf_winner) %>%
ggplot(aes(x=rf_winner,label = rf_winner)) +
geom_histogram()
data.frame(rf_winner) %>%
ggplot(aes(x=rf_winner,label = rf_winner)) +
geom_histogram(color="darkblue", fill="lightblue")
data.frame(rf_winner) %>%
ggplot(aes(x=rf_winner,label = rf_winner)) +
geom_histogram(color="darkblue", fill="lightblue") +
geom_text()
data.frame(rf_winner) %>%
ggplot(aes(x=rf_winner,label = rf_winner)) +
geom_histogram(color="darkblue", fill="lightblue")
data.frame(rf_winner) %>%
ggplot(aes(x=rf_winner,label = rf_winner)) +
geom_histogram(color="darkblue", fill="lightblue") +
scale_y_continuous(breaks=c(0.5, 31.5, 1))
data.frame(rf_winner) %>%
ggplot(aes(x=rf_winner,label = rf_winner)) +
geom_histogram(color="darkblue", fill="lightblue") +
scale_x_continuous(breaks=c(0.5, 31.5, 1))
hist(rf_winner, breaks = seq(0.5, 31.5, 1), xlab="Model", ylab="Frequency", main="")
data.frame(rf_winner) %>%
ggplot(aes(x=rf_winner,label = rf_winner)) +
geom_histogram(color="darkblue", fill="lightblue") +
scale_y_continuous(breaks=c(0.5, 31.5, 1))
formulas[which.max(accuracy)]
plot(1:length(formulas), accuracy, xlab="Model Number", ylab="Accuracy")
accuracy
plot(1:length(formulas), accuracy1, xlab="Model Number", ylab="Accuracy")
hist(rf_winner, breaks = seq(0.5, 31.5, 1), xlab="Model", ylab="Frequency", main="")
formulas[17]
formulas[13]
myForest1 = randomForest(formula=as.formula(formulas[26]),
data=df_train_rf)
prediction1 = predict(myForest1, df1)
prediction_df1 = data.frame(df1$Edible, prediction1)
cnf_mat1 = table(prediction_df1$df1.Edible, prediction_df1$prediction1)
cnf_mat1
accuracy1 = (cnf_mat1[1,1] + cnf_mat1[2,2])/dim(df1)[1]
accuracy1
varImpPlot(myForest,
sort = T,
main="Fig 11: Feature importance by random forest model 27")
